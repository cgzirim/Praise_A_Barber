swagger: '2.0'
info:
  description: >-
    This is a sample server Petstore server.  You can find out more about    
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).      For this sample, you can use the api
    key `special-key` to test the authorization     filters.
  version: 1.0.0
  title: Praise A Barber API
  termsOfService: http://swagger.io/terms/
  contact:
    email: elviscigweamaka@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
host: praiseabarber.herokuapp.com
basePath: /api/v1/user
tags:
  - name: barber
    description: Operations about barbers
  - name: hairstyle
    description: Everything abourt hairstyles
  - name: user
    description: Everything about users
  - name: review
    description: Operations about reviews

schemes:
  - http
paths:
  /barber/:
    post:
      tags:
        - barber
      summary: Create barber
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created barber object
          required: true
          schema:
            $ref: '#/definitions/Barber'
      responses:
        '201':
          description: Successful
  /barber/login:
    post:
      tags:
        - barber
      summary: Logs barber into the system
      description: ''
      operationId: loginBarber
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: Successful
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied

  /barber/logout:
    get:
      tags:
        - barber
      summary: Logs out current logged in barber session
      description: ''
      operationId: logoutBarber
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: Success
  /barbers/:
    get:
      tags:
        - barber
      summary: Get barbers
      description: ''
      operationId: getBarbers
      produces:
        - application/xml
        - application/json
      parameters:
        - name: state
          in: query
          description: 'Get all barbers from a state'
          required: false
          type: string
        - name: city
          in: query
          description: 'Get all barbers from a city'
          required: false
          type: string
      responses:
        default:
          description: Success
          
  /barber/{username}:
    get:
      tags:
        - barber
      summary: Get barber by user name
      description: ''
      operationId: getBarberByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
        - name: filter
          in: query
          description: Values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - data
              - posts
              - reviews
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Barber'
        '400':
          description: Invalid username supplied
        '404':
          description: Barber not found
    put:
      tags:
        - barber
      summary: Update barber
      description: This can only be done by the logged in user.
      operationId: updateBarber
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: username of barber that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated barber object
          required: true
          schema:
            $ref: '#/definitions/Barber'
      responses:
        '400':
          description: Invalid barber supplied
        '404':
          description: Barber not found
    delete:
      tags:
        - barber
      summary: Delete barber
      description: This can only be done by the logged in user.
      operationId: deleteBarber
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /barber/{username}/add_style/{hairstyle}:
    put:
      tags:
        - barber
      summary: Add style to barber list of style
      description: This can only be done by the logged in user.
      operationId: updateBarberHairstyle
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: username of barber that needs to be updated
          required: true
          type: string
        - name: hairstyle
          in: path
          description: hairstyle to add to the barber's list of styles
          required: true
          type: string
      responses:
        '400':
          description: Invalid barber supplied
        '404':
          description: Barber not found

  /barber/{username}/remove_style/{hairstyle}:
    put:
      tags:
        - barber
      summary: Remove hairstyle from list of barber hairstyles
      description: This can only be done by the logged in user.
      operationId: deleteBarberHairstyle
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: username of barber that needs to be updated
          required: true
          type: string
        - name: hairstyle
          in: path
          description: hairstyle to remove from the barber's list of styles
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /hairstyle/:
    post:
      tags:
        - hairstyle
      summary: Create hairstyle
      description: This can only be done by the logged in user.
      operationId: createHairstyle
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created hairstyle object
          required: true
          schema:
            $ref: '#/definitions/Hairstyle'
      responses:
        '201':
          description: Successful

  /hairstyles/:
    get:
      tags:
        - hairstyle
      summary: Get hairstyles
      description: ''
      operationId: getHairstyle
      produces:
        - application/xml
        - application/json
      responses:
        default:
          description: Success
  /hairstyle/{hairstyle_name}:
    put:
      tags:
        - hairstyle
      summary: Update hairstyle
      description: This can only be done by the logged in user.
      operationId: updateHairstyle
      produces:
        - application/xml
        - application/json
      parameters:
        - name: hairstyle_name
          in: path
          description: hairstyle that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Update hairstyle object
          required: true
          schema:
            $ref: '#/definitions/Hairstyle'
      responses:
        '400':
          description: Invalid hairstyle supplied
        '404':
          description: hairstyle not found
    delete:
      tags:
        - hairstyle
      summary: Delete hairstyle
      description: This can only be done by the logged in user.
      operationId: deleteHairstyle
      produces:
        - application/xml
        - application/json
      parameters:
        - name: hairstyle_name
          in: path
          description: Name of the hairstyle that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid hairstyle supplied
        '404':
          description: Hairstyle not found
  
  /cust/:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: Successful
  /cust/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: Successful
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied

  /cust/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: Success

  /custs/:
    get:
      tags:
        - user
      summary: Get users
      description: ''
      operationId: getUsers
      produces:
        - application/xml
        - application/json
      responses:
        default:
          description: Success
  
  /cust/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
          
    put:
        tags:
          - user
        summary: Update user
        description: This can only be done by the logged in user.
        operationId: updateUser
        produces:
          - application/xml
          - application/json
        parameters:
          - name: username
            in: path
            description: username of user that needs to be updated
            required: true
            type: string
          - in: body
            name: body
            description: Update user object
            required: true
            schema:
              $ref: '#/definitions/User'
        responses:
          '400':
            description: Invalid user supplied
          '404':
            description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /review/:
      post:
        tags:
          - review
        summary: Make a review
        description: This can only be done by the logged in user.
        operationId: createReview
        produces:
          - application/xml
          - application/json
        parameters:
          - in: body
            name: body
            description: Created review object
            required: true
            schema:
              $ref: '#/definitions/Review'
        responses:
          '201':
            description: Success

  /reviews/{barber_username}:
    get:
      tags:
        - review
      summary: Get reviews for a barber
      description: ''
      operationId: getReviewByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: barber_username
          in: path
          description: 'Username of the barber to get reviews from'
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Review'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /review/{review_id}:
    put:
      tags:
        - review
      summary: Update a review
      description: This can only be done by the logged in user.
      operationId: updateReview
      produces:
        - application/xml
        - application/json
      parameters:
        - name: review_id
          in: path
          description: id of review that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Update review object
          required: true
          schema:
            $ref: '#/definitions/Review'
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Review not found
    delete:
      tags:
        - review
      summary: Delete review
      description: This can only be done by the logged in user.
      operationId: deleteReview
      produces:
        - application/xml
        - application/json
      parameters:
        - name: review_id
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '404':
          description: User not found




definitions:
  Barber:
    type: object
    properties:
      username:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
      country:
        type: string
      state:
        type: string
      city:
        type: string
      address:
        type: string
      signup_date:
        type: string
        format: date-time
      updated_date:
        type: string
        format: date-time
      available:
        type: boolean
      job_count:
        type: integer
      styles:
        type: string
        format: list
    xml:
      name: Order

  User:
    type: object
    properties:
      username:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  
  Review:
    type: object
    properties:
      user_id:
        type: string
      barber_id:
        type: string
      review:
        type: string

  Hairstyle:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      image:
        type: string
      active:
        type: integer

  Login:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
